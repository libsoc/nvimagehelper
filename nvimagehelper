#!/bin/bash
# Erstellt Instagram-Bilder (evtl. auch andere Social-Media Bilder) aus Wordpress-Artikeln von lucys-magazin.com
# Erweiterung auf andere Wordpress-Blogs ist möglich.

clear
echo "-----------------------------------------------------------------------------------------------------------"
echo -e "---------------------------------------------" "\e[1mNV Image Helper\e[0m" "---------------------------------------------"
echo "-----------------------------------------------------------------------------------------------------------"
echo ""
	#GLOBALE VARIABLEN
	tmp_folder=$HOME/nvimagehelper/tmp
	template_folder=$HOME/nvimagehelper/template
	output_folder=$HOME/nvimagehelper/fertig
	working_directory=$HOME/nvimagehelper #dort ist das script dominantcolor

	#XPATH
	#Wenn die Lucys-Seite geupdated wird, dann sollten diese Xpath-Pfade angepasst werden
	xpath_header="/html/body/div[1]/div[2]/div/div/article/header/h1/text()"
	xpath_bild="/html/body/div[1]/div[2]/div/div/article/div[1]/figure/a/img/@src"
	xpath_youtube="/html/body/div[1]/div[2]/div/div/article/div[1]/div[1]/iframe/@src"
	xpath_absatz1="/html/body/div[1]/div[2]/div/div/article/div[1]/p[1]"
	xpath_absatz2="/html/body/div[1]/div[2]/div/div/article/div[1]/p[2]"
	xpath_tags="/html/body/div[1]/div[2]/div/div/article/div[2]/ul"

# ----------------------------------------------------------------------------------------------------------- 
# Funktionen
# ----------------------------------------------------------------------------------------------------------- 

  # ---
  # Die Funktion 'auto_url' sucht automatisch nach dem aktuellen Wordpress-Beitrag auf lucys-magazin.com ($LUCYURL)
  # ---
	auto_url () {
	    echo "auto_url gestartet..."
	    echo ""
	    LUCYURL=https://www.lucys-magazin.com
	    URL=$(wget -q -O - $LUCYURL | xmllint --html --xpath '/html/body/div[1]/div[2]/div/div/div[1]/div[3]/ul/li[1]/div/div/div[1]/h3/a/@href' - 2>/dev/null | sed 's/href="//' | sed 's/"//' | sed 's/ //')
	    echo "Die Auto-URL: $URL"
	    echo ""
	}


  # ---
  # Die Funktion 'url_check' überprüft ob es sich um eine gültige URL handelt. (Relevant, wenn dem Script eine URL als Parameter übergeben wird.)
  # Codeblock übernommen aus altem Script. Muss noch für die Verwendung als Funktion angepasst werden
  # ---
	url_check () {
	 regex='(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'
	 string=$URL
	    if [[ $string =~ $regex ]] 
	      then
		echo "Gültiger Link"
		    URL=$(echo $URL) #Die URL wird mit dem Zwischenspeicher beladen, sofern die Schleife oberhalb der Meinung war, es handele sich um eine korrekte URL
		echo "Die URL:" $URL
		echo ""
	    else
	     echo "Die eingegebene Adresse ist nicht gültig"
	     exit 1
	    fi
	}
	
  # ---
  # Die Funktion 'get_bild' sucht in der angegebenen URL nach dem Beitragsbild und läd es mittels wget.
  # ---
	get_bild () {
	    echo "Der Bilddownload mit WGET wird gestartet (get_bild)"
	    echo ""
	      #Der Link zum Beitragsbild wird per xmllint ermittelt (aus $URL):
	  BILDLINK=$(wget -q -O - "$URL" | xmllint --html --xpath $xpath_bild - 2>/dev/null | sed 's/src="//' | sed 's/"//')
	      #Beitragsbild wird in den tmp_folder geladen:
	  wget $BILDLINK -O "$tmp_folder"/bilddownload.jpg

		if [[ $? -ne 0 ]]; then 
		    # wenn der Bilddownload fehlgeschlagen ist, wird davon ausgegangen, dass es sich um ein Youtube-Beitragsbild handelt. 
		    # Dann wird der Teil gestartet, der Youtube-Thumbnails läd
		   
		    get_yt_thumb # Funktion 'get_yt_thumb' wird aufgerufen. (siehe nächste Funktion)

		  echo "Es handelt sich um ein Youtube-Beitragsbild"
		  echo ""
		else
		  echo "Es handelt sich um ein statisches Beitragsbild"
		  echo ""


		fi	
	  #Optional: Bilddatei wird als Notification am Bildschirmrand ausgegeben (dient u.a. dem Debuging):
	  notify-send -i "$tmp_folder"/bilddownload.jpg 'Bild wurde geladen' $BILDLINK

	echo "Bilddownloadvorgang ist abgeschlossen"
	echo ""
	}

  # ---
  # 'get_yt_thumb' wird ggf. von 'get_bild' aufgerufen. Es läd ein Youtube-Thumbnail als Beitragsbild.
  # ---
	get_yt_thumb () {
		  YTLINK=$(wget -q -O - $URL | xmllint --html --xpath $xpath_youtube - 2>/dev/null | sed 's/src="//' | sed 's/"//')
		  YTID=$(echo $YTLINK | sed 's/https:\/\/www.youtube.com\/embed\///')

		    echo "Versuche maxresdefault.jpg (thumbnail) zu laden..."
		    echo ""
		  YT_THUMB_URL=$(echo "https://i.ytimg.com/vi/"$YTID"/maxresdefault.jpg")
		  wget $YT_THUMB_URL -O "$tmp_folder"/bilddownload.jpg
		    if [[ $? -ne 0 ]]; then
			 #Wenn wget ein Fehler ausgegeben hat, dann vermutlich weil maxresdefault nicht downloadbar war, in diesem Falle wird versucht hqdefault.jpg zu downloaden
			 echo "wget-download fehlgeschlagen. Versuche hqdefault.jpg zu laden"
			 echo ""
			 YT_THUMB_URL=$(echo "https://i.ytimg.com/vi/"$YTID"/hqdefault.jpg")
			 wget $YT_THUMB_URL -O "$tmp_folder"/bilddownload.jpg
		     else
			 #Wenn wget keinen Fehler ausgegeben hat, wird davon ausgegangen, dass der Download von maxresdefault.jpg geglückt ist.
		       echo "maxresdefault.jpg wurde erfolgreich geladen"
		       echo ""
		    fi
	}
	
  # ---
  # 'get_headline' ermittelt die Überschrift des Blogbeitrages und schreibt es in die Variable 'headline'
  # ---
	get_headline () {
	  wget -q -O - $URL | xmllint --html --xpath $xpath_header - 2>/dev/null > "$tmp_folder"/ueberschrift.txt
	  read headline < "$tmp_folder"/ueberschrift.txt
	  	#Gibt die Überschrift als Notifikation aus. Dient dem Debuging:
	  notify-send "Die Überschrift lautet: $headline"
	}

  # ---
  # 'get_kurztext' ermittelt die Überschrift des Blogbeitrages und schreibt es in die Variable 'headline'
  # ---
	get_kurztext () {
	  #Die Anzahl der Zeichen sollte zwischen 500 und 700 liegen. Hier treten manchmal unbekannte Fehler auf (dann auf >700 verkleinern)
	  zeichenzahl="700"
	  
	  wget -q -O - $URL | xmllint --html --xpath $xpath_absatz1 - 2>/dev/null | sed -e 's/<[^>]*>//g' > "$tmp_folder"/absatz1.txt
	  wget -q -O - $URL | xmllint --html --xpath $xpath_absatz2 - 2>/dev/null | sed -e 's/<[^>]*>//g' > "$tmp_folder"/absatz2.txt
	  read p1 < "$tmp_folder"/absatz1.txt
	  read p2 < "$tmp_folder"/absatz2.txt
	  kurztext="$p1"
	  kurztext="$p1 $p2"
	  echo $kurztext | head -c $zeichenzahl > "$tmp_folder"/kurztext.txt
	  read kurztext < "$tmp_folder"/kurztext.txt
	}

  # ---
  # 'get_ausgabename' ermittelt den Dateinamen aus der Überschrift
  # ---
	get_ausgabename () {
	  tr -d ' ' < "$tmp_folder"/ueberschrift.txt > "$tmp_folder"/filename.txt
	  read ausgabename < "$tmp_folder"/filename.txt
	}

  # ---
  # 'build_seite1' Erzeugt das erste von zwei Instagram-Bildern (mit Überschrift)
  # ---
	build_seite1 () {

	  echo "Seite 1 wird erstellt"
	  echo ""

		  font="FreeSans-Fett"
		  textausrichtung="NorthWest" #"NorthEast" für rechtsbündig
		  textfarbe="white"
		  schattenfarbe="black"
		  geo_text="+30+50"
		  geo_schatten="+35+55"
	  
	  # Bringt das Ausgangsbild auf eine Mindestgröße von 1080 auf Länge und Breite (ignoriert und schneidet Überlappungen):
	     convert "$tmp_folder"/bilddownload.* -resize 1080x1080\^ "$tmp_folder"/resize.png

	  # Setzt resize.png und das insta-template.png zusammen auf eine Größe von 1080 x 1080 px
	     convert "$tmp_folder"/resize.png "$template_folder"/insta-template.png -gravity center -crop 1080x1080+0+0 -composite "$tmp_folder"/resz-temp.png
	  
	  # Schwarzer teil der Überschrift (quasi Schlagschatten) wird geschrieben:
	     convert "$tmp_folder"/resz-temp.png -background transparent -fill $schattenfarbe -gravity $textausrichtung -font $font -size 670x200 caption:"$headline" -geometry $geo_schatten -composite "$tmp_folder"/output_without.png

	  # Fügt dem Bild die Überschrift (headline) hinzu die Anfangs definiert wurde, und speichert es ab wie der Ausgabename definiert wurde:
	     convert "$tmp_folder"/output_without.png -background transparent -fill $textfarbe -gravity $textausrichtung -font $font -size 670x200 caption:"$headline" -geometry $geo_text -composite "$output_folder"/"$ausgabename"_1.png
       
       # -- Horizontal-fix:
       
       	  # Das Beitragsbild wird horizontal skaliert (Höhe < 1080; notwendig, falls das Bild sehr viel breiter als hoch ist):
	     convert "$tmp_folder"/bilddownload.* -resize 1080x "$tmp_folder"/resize2.png 
	     
	  # Hintergrundbild (abgedunkelt und verschwommen als Hintergrund für horizontales Bild):
	     convert "$tmp_folder"/bilddownload.* -resize 2080x2080\^ -blur 0x8 -brightness-contrast -15 "$tmp_folder"/resize_horiz_blur.png  
	  
	  # Horizontales Beitragsbild wird zentriert in 1080x1080 Bild (horizlayer.png) eingebaut.  
	     convert "$tmp_folder"/resize_horiz_blur.png "$tmp_folder"/resize2.png -gravity center -crop 1080x1080+0+0 -composite "$tmp_folder"/horizlayer.png
	  # Setzt horizlayer.png und das insta-template.png zusammen auf eine Größe von 1080 x 1080 px
	     convert "$tmp_folder"/horizlayer.png "$template_folder"/insta-template.png -gravity center -composite "$tmp_folder"/resz-temp2.png
	  # Schwarzer Teil der Überschrift (quasi Schlagschatten) wird geschrieben:
	     convert "$tmp_folder"/resz-temp2.png -background transparent -fill $schattenfarbe -gravity $textausrichtung -font $font -size 670x200 caption:"$headline" -geometry $geo_schatten -composite "$tmp_folder"/output_without.png
	  # Fügt dem Bild die Überschrift (headline) hinzu die Anfangs definiert wurde, und speichert es ab wie der Ausgabename definiert wurde.
	     convert "$tmp_folder"/output_without.png -background transparent -fill $textfarbe -gravity $textausrichtung -font $font -size 670x200 caption:"$headline" -geometry $geo_text -composite "$output_folder"/"$ausgabename"_1hz.png 
	}

  # ---
  # 'colordominant' ermittelt die dominierende Farbe des Beitragsbildes und speichert sie in die Variable "farbe"
  # ---
	colordominant () {
	farbe="$("$working_directory"/dominantcolor "$tmp_folder"/resize.png)"
	echo "die dominante farbe wurde ermittelt"
	echo ""
	}

  # ---
  # 'build_seite2' erzeugt das zweite von zwei Instagram-Bildern (mit Abstract-Text)
  # ---
	build_seite2 () {

	  echo "Seite 2 wird erstellt"
	  echo ""

	  #Die Variable "farbe" wird durch das Skript "dominantcolor" gesetzt.
		farbe="$("$working_directory"/dominantcolor "$tmp_folder"/resize.png)"

	  #Der Farblayer wird erzeugt
	  convert "$tmp_folder"/resize.png -alpha set -fill "$1" -draw 'color 0,0 reset' -gravity center -crop 1080x1080+0+0 "$tmp_folder"/farblayer.png

	  # Layer wird transparent gemacht
	  convert "$tmp_folder"/farblayer.png -alpha set -channel A -evaluate Multiply 0.75 +channel "$tmp_folder"/opacity.png

	  # Transparenter Layer wird auf resize.png gelegt
	  convert "$tmp_folder"/resize.png "$tmp_folder"/opacity.png -composite -crop 1080x1080+0+0 "$tmp_folder"/p2overlay.png

	  # template wird auf die layer gelegt
	  convert "$tmp_folder"/p2overlay.png "$template_folder"/insta-template.png -gravity center -crop 1080x1080+0+0 -composite "$tmp_folder"/p2plustemp.png

	  # Kurztext wird auf das Bild geschrieben und Bild wird gespeichert:
	  convert "$tmp_folder"/p2plustemp.png -background transparent -fill white -gravity center -interline-spacing 5 -font FreeSans-Fett -size 970x890 caption:\\"«$kurztext (...)» \n\n\[Link in Bio]" -geometry +0-25 -composite "$output_folder"/"$ausgabename"_2"$1".png
	}

  # ---
  # 'social_text' erzeugt den notwendigen Beschreibungstext plus Link, Tags usw. Für Insta und Telegram
  # ---
	social_text () {

	  cat "$tmp_folder"/kurztext.txt | sed 's/&nbsp;/ /g; s/&amp;/\&/g; s/&lt;/\</g; s/&gt;/\>/g; s/&quot;/\"/g; s/#&#39;/\'"'"'/g; s/&ldquo;/\"/g; s/&rdquo;/\"/g;' > "$tmp_folder"/kurztext_ende.txt
	  #Kosmetische verbesserung. Macht z.B. dass aus &amp; ein normales & Zeichen wird.

	  read kurztext_ende < "$tmp_folder"/kurztext_ende.txt

	    # Tags werden von der Webseite geladen:
	    wget -q -O - $URL | xmllint --html --xpath $xpath_tags - 2>/dev/null > "$tmp_folder"/tags.txt
	    # HTML Tags und Leerzeichen innerhalb der Tags werden umständlich mit sed entfernt.
		cat "$tmp_folder"/tags.txt | \
		sed -E 's/<a[^>]*>([^<]*)<\/a[^>]*>/\1/g' | \
		sed -E 's/<li>/#/g' | \
		sed -E 's/<ul>//g' | \
		sed -E 's/ //g' | \
		sed -E 's/<\/li>/ /g' | \
		sed -E 's/<\/ul>//g' > "$tmp_folder"/tags2.txt
		  read tags < "$tmp_folder"/tags2.txt
		    #echo **$headline**
		    #echo ""
		    #echo "«"$kurztext_ende"(...)» [Link in Bio]"
		    #echo ""
		    #echo $URL
		    #echo ""
		    #echo $tags
	var_markup="**"
	var_headline="$headline"
socialtext="$var_markup$headline$var_markup

«$kurztext_ende (...)» 
[Link in Bio]

$URL

$tags"
	zenity --info --width 300 --height 300 --text "$socialtext"
      }

# ----------------------------------------------------------------------------------------------------------- 
# Aufruf der Funktionen durch verschiedene Schleifen
# ----------------------------------------------------------------------------------------------------------- 

#auto_url
URL=https://lucys-magazin.com/wolf-dieter-storl-im-musikvideo-gwydion/
url_check
get_bild
get_headline
get_kurztext
get_ausgabename
build_seite1
colordominant
build_seite2 "$farbe"
build_seite2 "#000000"
social_text
